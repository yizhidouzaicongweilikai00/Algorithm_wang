Java位运算：直接对整数再内存中的二进制位进行操作的运算
位运算包括：与&      或|      非 ~      异或    同或      移位，
java十进制转二进制：Integer.toBinaryString(int n);
一、各运算的使用
1.与运算的使用：&，指定位清零  1&1=1    1&0=0
  //例：24 ： 0001 1000 ，对第四位清零，结果为 0001 0000 = 16

移位运算：  
将a的二进制数左移2位，右补0。若a=15，即二进制数00001111，
左移2位得00111100，即十进制数60，高位左移后溢出，舍弃
《左移一位相当于该数乘以2，左移2位相当于该数乘以2^2=4。上面
举的例子15<< 2=60，即乘了4。但此结论只适用于该数左移时
被溢出舍弃的高位中不包含1的情况。》
《按二进制形式把所有的数字向右移动对应的位数，低位移出(舍弃)，
高位的空位补符号位，即正数补零，负数补1。》
例如11 >> 2，则是将数字11右移2位
《计算过程：
11的二进制形式为：0000 1011，然后把低位的最后两个数字移出，
因为该数字是正数，所以在高位补零。则得到的最终结果是0000 0010。
转换为十进制是2。》