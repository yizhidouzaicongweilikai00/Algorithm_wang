package com.wang.bitwise;


/*
 * 1.//指定位清零，
 * 2.获取指定位的值,想要获得第几位就先左移几位，然后右移几位
 * 3.判断一个数是否为2的n次方，
 * 4.如何求二进制中1的个数：
 * 5.
 * 6.
 * 7.
 * 
 * 
 * */




/*
 * Java位运算：直接对整数再内存中的二进制位进行操作的运算
 * 位运算包括：与&      或|      非 ~      异或    同或      移位，
 * java十进制转二进制：Integer.toBinaryString(int n);
 * 
 * */
public class BitWise {
	public static void main(String[] args) {
		test();
	}
	public static void test() {
		//指定位清零，
	/*
	 * 例如24：0001  1000，对第四位清零，结果为0001 0000=16
	 * 如果用与&运算计算如下
	 * */	
		int a = 24&(1<<4);
		System.out.println(a);
		
	/*
	 * 获取指定位的值,想要获得第几位就先左移几位，然后右移几位
	 * 24 ：0001 1000 获取第四位的值， 结果为1
	 * 
	 * */
		int a1=((24&(1<<2))>>2);
		System.out.println(a1);
	}
	/*
	 * 判断一个数是否为2的n次方，
	 * 如果一个数是2的次幂，n&(n-1)为0
	 * //64 : 0100 0000    63 : 0011 1111  , 64 & 63 = 0100 0000 & 0011 1111 =0
	 *   64 & (64-1)   //结果为0 ， 是2的次幂
	 * */
	
	public boolean isPower(int n) {
		if(n<1)
			return false;
		int m=n&(n-1);	
		return m==0;
	}
	
	/*
	 * 如何求二进制中1的个数：
	 * 给定一个整数，输出这这个
	 * 整数二进制表示中1的个数，例如给定整数7，其二进制表示为0，因此输出结果为3
	 * 解题方法：可以用位操作来完成。具体思路：
	 * 首先，判断这个数的最后一位是否为1，如果为1，则计数器加1.
	 * 然后，通过右移丢弃掉最后一位
	 * 循环执行该操作直到这个数等于0为止。
	 * */
	public int countOne(int n) {
		int count=0;//用来计数
		while(n>0) {
			if((n&1)==1) {
				count++;
			}
			n=n>>1;
		}
		return count;
	}
}
